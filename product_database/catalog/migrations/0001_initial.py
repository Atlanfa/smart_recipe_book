# Generated by Django 3.2 on 2021-07-28 14:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import location_field.models.plain


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Dish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('recipe', models.TextField()),
                ('favorite', models.ManyToManyField(blank=True, related_name='favorite_dish_type', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a product name', max_length=200)),
                ('proteins_in_100_g', models.FloatField()),
                ('proteins_in_100_g_including_animals', models.FloatField()),
                ('fat_in_100_g', models.FloatField()),
                ('fat_in_100_g_including_animals', models.FloatField()),
                ('digestible_carbohydrates_in_100_g', models.FloatField()),
                ('digestible_carbohydrates_in_100_g_incl_m_and_d', models.FloatField()),
                ('dietary_fiber_in_100_g', models.FloatField()),
                ('dietary_fiber_in_100_g_including_fiber_and_pectin', models.FloatField()),
                ('polyunsaturated_acid', models.FloatField()),
                ('saturated_acid', models.FloatField()),
                ('monounsaturated_acid', models.FloatField()),
                ('calcium_in_100_g_in_mg', models.FloatField()),
                ('phosphorus_in_100_g_in_mg', models.FloatField()),
                ('magnesium_in_100_g_in_mg', models.FloatField()),
                ('potassium_in_100_g_in_mg', models.FloatField()),
                ('sodium_in_100_g_in_mg', models.FloatField()),
                ('chlorine_in_100_g_in_mg', models.FloatField()),
                ('sulfur_in_100_g_in_mg', models.FloatField()),
                ('iron_in_100_g_in_mg', models.FloatField()),
                ('zinc_in_100_g_in_mg', models.FloatField()),
                ('iodine_in_100_g_in_mg', models.FloatField()),
                ('fluorine_in_100_g_in_mg', models.FloatField()),
                ('thiamine_vitamin_B1_in_100_g_in_mg', models.FloatField()),
                ('riboflavin_vitamin_B2_in_100_g_in_mg', models.FloatField()),
                ('pyridoxine_vitamin_B6_in_100_g_in_mg', models.FloatField()),
                ('pantothenic_acid_vitamin_B3_in_100_g_in_mg', models.FloatField()),
                ('folacin_acid_vitamin_B9_in_100_g_in_mcg', models.FloatField()),
                ('cobalamin_acid_vitamin_B12_in_100_g_in_mcg', models.FloatField()),
                ('niacin_vitamin_PP_in_100_g_in_mg', models.FloatField()),
                ('ascorbic_acid_vitamin_C_in_100_g_in_mg', models.FloatField()),
                ('retinol_vitamin_A_in_100_g_in_mcg', models.FloatField()),
                ('tocopherol_vitamin_E_in_100_g_in_mg', models.FloatField()),
                ('cholecalciferol_vitamin_D_in_100_g_in_mcg', models.FloatField()),
                ('energy_value_in_kcal', models.FloatField()),
                ('favorite', models.ManyToManyField(blank=True, related_name='favorite_product_type', to=settings.AUTH_USER_MODEL)),
                ('who_added', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='who_added_to_product_type', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a store name', max_length=50)),
                ('street', models.CharField(max_length=255, null=True)),
                ('city', models.CharField(max_length=255, null=True)),
                ('country', models.CharField(max_length=255, null=True)),
                ('location', location_field.models.plain.PlainLocationField(max_length=63, null=True)),
                ('who_added', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='who_added_to_store_type', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('sex', models.CharField(choices=[('m', 'Male'), ('f', 'Female')], default='m', max_length=1)),
                ('weight', models.FloatField(null=True)),
                ('nursing', models.BooleanField(blank=True, null=True)),
                ('kid_date_of_birth', models.DateField(blank=True, null=True)),
                ('cpa', models.CharField(choices=[('i', 'workers mostly mental work, very light physical activity'), ('ii', 'workers engaged in light work, light physical activity'), ('iii', 'workers of average hard work, average physical activity'), ('iv', 'workers of hard physical labor, high physical activity'), ('v', 'workers of especially heavy physical work, very high physical activity')], default='i', max_length=3)),
                ('city', models.CharField(max_length=255, null=True)),
                ('country', models.CharField(max_length=255, null=True)),
                ('location', location_field.models.plain.PlainLocationField(max_length=63, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProductAmount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=3, max_digits=10)),
                ('unit', models.CharField(choices=[('kg', 'Kilogram'), ('g', 'Gram'), ('l', 'Liter'), ('ml', 'Milliliter'), ('thing', 'Thing')], default='kg', help_text='Choose unit', max_length=10)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.product')),
                ('related_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.dish')),
            ],
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.product')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.store')),
                ('who_added', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='who_added_to_price_type', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='KitchenUtensil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter kitchen utensil name', max_length=100)),
                ('who_added', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='who_added_to_kitchen_utensil_type', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='dish',
            name='kitchen_utensils',
            field=models.ManyToManyField(to='catalog.KitchenUtensil'),
        ),
        migrations.AddField(
            model_name='dish',
            name='products',
            field=models.ManyToManyField(blank=True, to='catalog.ProductAmount'),
        ),
        migrations.AddField(
            model_name='dish',
            name='who_added',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='who_added_to_dish_type', to=settings.AUTH_USER_MODEL),
        ),
    ]
